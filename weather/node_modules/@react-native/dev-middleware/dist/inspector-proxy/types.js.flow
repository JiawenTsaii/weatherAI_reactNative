/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
<<<<<<< HEAD
 * @flow strict-local
=======
 * @flow
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
 * @format
 * @oncall react_native
 */

<<<<<<< HEAD
/**
 * A capability flag disables a specific feature/hack in the InspectorProxy
 * layer by indicating that the target supports one or more modern CDP features.
 */
export type TargetCapabilityFlags = $ReadOnly<{
  /**
   * The target supports a stable page representation across reloads.
   *
   * In the proxy, this disables legacy page reload emulation and the
   * additional '(Experimental)' target in `/json/list`.
   *
   * In the launch flow, this allows targets to be matched directly by `appId`.
   */
  nativePageReloads?: boolean,

  /**
   * The target supports fetching source code and source maps.
   *
   * In the proxy, this disables source fetching emulation and host rewrites.
   */
  nativeSourceCodeFetching?: boolean,

  /**
   * The target supports native network inspection.
   *
   * In the proxy, this disables intercepting and storing network requests.
   */
  nativeNetworkInspection?: boolean,
}>;

// Page information received from the device. New page is created for
// each new instance of VM and can appear when user reloads React Native
// application.

export type PageFromDevice = $ReadOnly<{
=======
// Page information received from the device. New page is created for
// each new instance of VM and can appear when user reloads React Native
// application.
export type Page = {
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
  id: string,
  title: string,
  vm: string,
  app: string,
<<<<<<< HEAD
  capabilities?: TargetCapabilityFlags,
}>;

export type Page = Required<PageFromDevice>;

// Chrome Debugger Protocol message/event passed between device and debugger.
export type WrappedEvent = $ReadOnly<{
  event: "wrappedEvent",
  payload: $ReadOnly<{
    pageId: string,
    wrappedEvent: string,
  }>,
}>;

// Request sent from Inspector Proxy to Device when new debugger is connected
// to particular page.
export type ConnectRequest = $ReadOnly<{
  event: "connect",
  payload: $ReadOnly<{ pageId: string }>,
}>;

// Request sent from Inspector Proxy to Device to notify that debugger is
// disconnected.
export type DisconnectRequest = $ReadOnly<{
  event: "disconnect",
  payload: $ReadOnly<{ pageId: string }>,
}>;

// Request sent from Inspector Proxy to Device to get a list of pages.
export type GetPagesRequest = { event: "getPages" };
=======
  ...
};

// Chrome Debugger Protocol message/event passed between device and debugger.
export type WrappedEvent = {
  event: "wrappedEvent",
  payload: {
    pageId: string,
    wrappedEvent: string,
    ...
  },
  ...
};

// Request sent from Inspector Proxy to Device when new debugger is connected
// to particular page.
export type ConnectRequest = {
  event: "connect",
  payload: { pageId: string, ... },
  ...
};

// Request sent from Inspector Proxy to Device to notify that debugger is
// disconnected.
export type DisconnectRequest = {
  event: "disconnect",
  payload: { pageId: string, ... },
  ...
};

// Request sent from Inspector Proxy to Device to get a list of pages.
export type GetPagesRequest = { event: "getPages", ... };
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615

// Response to GetPagesRequest containing a list of page infos.
export type GetPagesResponse = {
  event: "getPages",
<<<<<<< HEAD
  payload: $ReadOnlyArray<PageFromDevice>,
=======
  payload: Array<Page>,
  ...
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
};

// Union type for all possible messages sent from device to Inspector Proxy.
export type MessageFromDevice =
  | GetPagesResponse
  | WrappedEvent
  | DisconnectRequest;

// Union type for all possible messages sent from Inspector Proxy to device.
export type MessageToDevice =
  | GetPagesRequest
  | WrappedEvent
  | ConnectRequest
  | DisconnectRequest;

// Page description object that is sent in response to /json HTTP request from debugger.
<<<<<<< HEAD
export type PageDescription = $ReadOnly<{
=======
export type PageDescription = {
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
  id: string,
  description: string,
  title: string,
  faviconUrl: string,
  devtoolsFrontendUrl: string,
  type: string,
  webSocketDebuggerUrl: string,
<<<<<<< HEAD
  deviceName: string,
  vm: string,
  // Metadata specific to React Native
  reactNative: $ReadOnly<{
    logicalDeviceId: string,
    capabilities: Page["capabilities"],
  }>,
}>;

=======
  ...
};
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
export type JsonPagesListResponse = Array<PageDescription>;

// Response to /json/version HTTP request from the debugger specifying browser type and
// Chrome protocol version.
<<<<<<< HEAD
export type JsonVersionResponse = $ReadOnly<{
  Browser: string,
  "Protocol-Version": string,
}>;

export type JSONSerializable =
  | boolean
  | number
  | string
  | null
  | $ReadOnlyArray<JSONSerializable>
  | { +[string]: JSONSerializable };
=======
export type JsonVersionResponse = {
  Browser: string,
  "Protocol-Version": string,
  ...
};

/**
 * Types were exported from https://github.com/ChromeDevTools/devtools-protocol/blob/master/types/protocol.d.ts
 */

export type SetBreakpointByUrlRequest = {
  id: number,
  method: "Debugger.setBreakpointByUrl",
  params: {
    lineNumber: number,
    url?: string,
    urlRegex?: string,
    scriptHash?: string,
    columnNumber?: number,
    condition?: string,
  },
};

export type GetScriptSourceRequest = {
  id: number,
  method: "Debugger.getScriptSource",
  params: {
    scriptId: string,
  },
};

export type GetScriptSourceResponse = {
  scriptSource: string,
  /**
   * Wasm bytecode.
   */
  bytecode?: string,
};

export type ErrorResponse = {
  error: {
    message: string,
  },
};

export type DebuggerRequest =
  | SetBreakpointByUrlRequest
  | GetScriptSourceRequest;
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
