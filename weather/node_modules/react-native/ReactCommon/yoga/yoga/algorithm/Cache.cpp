/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include <yoga/algorithm/Cache.h>
#include <yoga/algorithm/PixelGrid.h>
#include <yoga/numeric/Comparison.h>

namespace facebook::yoga {

static inline bool sizeIsExactAndMatchesOldMeasuredSize(
<<<<<<< HEAD
    SizingMode sizeMode,
    float size,
    float lastComputedSize) {
  return sizeMode == SizingMode::StretchFit &&
      yoga::inexactEquals(size, lastComputedSize);
}

static inline bool oldSizeIsMaxContentAndStillFits(
    SizingMode sizeMode,
    float size,
    SizingMode lastSizeMode,
    float lastComputedSize) {
  return sizeMode == SizingMode::FitContent &&
      lastSizeMode == SizingMode::MaxContent &&
      (size >= lastComputedSize || yoga::inexactEquals(size, lastComputedSize));
}

static inline bool newSizeIsStricterAndStillValid(
    SizingMode sizeMode,
    float size,
    SizingMode lastSizeMode,
    float lastSize,
    float lastComputedSize) {
  return lastSizeMode == SizingMode::FitContent &&
      sizeMode == SizingMode::FitContent && yoga::isDefined(lastSize) &&
      yoga::isDefined(size) && yoga::isDefined(lastComputedSize) &&
      lastSize > size &&
=======
    MeasureMode sizeMode,
    float size,
    float lastComputedSize) {
  return sizeMode == MeasureMode::Exactly &&
      yoga::inexactEquals(size, lastComputedSize);
}

static inline bool oldSizeIsUnspecifiedAndStillFits(
    MeasureMode sizeMode,
    float size,
    MeasureMode lastSizeMode,
    float lastComputedSize) {
  return sizeMode == MeasureMode::AtMost &&
      lastSizeMode == MeasureMode::Undefined &&
      (size >= lastComputedSize || yoga::inexactEquals(size, lastComputedSize));
}

static inline bool newMeasureSizeIsStricterAndStillValid(
    MeasureMode sizeMode,
    float size,
    MeasureMode lastSizeMode,
    float lastSize,
    float lastComputedSize) {
  return lastSizeMode == MeasureMode::AtMost &&
      sizeMode == MeasureMode::AtMost && !std::isnan(lastSize) &&
      !std::isnan(size) && !std::isnan(lastComputedSize) && lastSize > size &&
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
      (lastComputedSize <= size || yoga::inexactEquals(size, lastComputedSize));
}

bool canUseCachedMeasurement(
<<<<<<< HEAD
    const SizingMode widthMode,
    const float availableWidth,
    const SizingMode heightMode,
    const float availableHeight,
    const SizingMode lastWidthMode,
    const float lastAvailableWidth,
    const SizingMode lastHeightMode,
=======
    const MeasureMode widthMode,
    const float availableWidth,
    const MeasureMode heightMode,
    const float availableHeight,
    const MeasureMode lastWidthMode,
    const float lastAvailableWidth,
    const MeasureMode lastHeightMode,
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
    const float lastAvailableHeight,
    const float lastComputedWidth,
    const float lastComputedHeight,
    const float marginRow,
    const float marginColumn,
    const yoga::Config* const config) {
<<<<<<< HEAD
  if ((yoga::isDefined(lastComputedHeight) && lastComputedHeight < 0) ||
      ((yoga::isDefined(lastComputedWidth)) && lastComputedWidth < 0)) {
=======
  if ((!std::isnan(lastComputedHeight) && lastComputedHeight < 0) ||
      (!std::isnan(lastComputedWidth) && lastComputedWidth < 0)) {
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
    return false;
  }

  const float pointScaleFactor = config->getPointScaleFactor();

  bool useRoundedComparison = config != nullptr && pointScaleFactor != 0;
  const float effectiveWidth = useRoundedComparison
      ? roundValueToPixelGrid(availableWidth, pointScaleFactor, false, false)
      : availableWidth;
  const float effectiveHeight = useRoundedComparison
      ? roundValueToPixelGrid(availableHeight, pointScaleFactor, false, false)
      : availableHeight;
  const float effectiveLastWidth = useRoundedComparison
      ? roundValueToPixelGrid(
            lastAvailableWidth, pointScaleFactor, false, false)
      : lastAvailableWidth;
  const float effectiveLastHeight = useRoundedComparison
      ? roundValueToPixelGrid(
            lastAvailableHeight, pointScaleFactor, false, false)
      : lastAvailableHeight;

  const bool hasSameWidthSpec = lastWidthMode == widthMode &&
      yoga::inexactEquals(effectiveLastWidth, effectiveWidth);
  const bool hasSameHeightSpec = lastHeightMode == heightMode &&
      yoga::inexactEquals(effectiveLastHeight, effectiveHeight);

  const bool widthIsCompatible =
      hasSameWidthSpec ||
      sizeIsExactAndMatchesOldMeasuredSize(
          widthMode, availableWidth - marginRow, lastComputedWidth) ||
<<<<<<< HEAD
      oldSizeIsMaxContentAndStillFits(
=======
      oldSizeIsUnspecifiedAndStillFits(
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
          widthMode,
          availableWidth - marginRow,
          lastWidthMode,
          lastComputedWidth) ||
<<<<<<< HEAD
      newSizeIsStricterAndStillValid(
=======
      newMeasureSizeIsStricterAndStillValid(
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
          widthMode,
          availableWidth - marginRow,
          lastWidthMode,
          lastAvailableWidth,
          lastComputedWidth);

<<<<<<< HEAD
  const bool heightIsCompatible = hasSameHeightSpec ||
      sizeIsExactAndMatchesOldMeasuredSize(
                                      heightMode,
                                      availableHeight - marginColumn,
                                      lastComputedHeight) ||
      oldSizeIsMaxContentAndStillFits(heightMode,
                                      availableHeight - marginColumn,
                                      lastHeightMode,
                                      lastComputedHeight) ||
      newSizeIsStricterAndStillValid(heightMode,
                                     availableHeight - marginColumn,
                                     lastHeightMode,
                                     lastAvailableHeight,
                                     lastComputedHeight);
=======
  const bool heightIsCompatible =
      hasSameHeightSpec ||
      sizeIsExactAndMatchesOldMeasuredSize(
          heightMode, availableHeight - marginColumn, lastComputedHeight) ||
      oldSizeIsUnspecifiedAndStillFits(
          heightMode,
          availableHeight - marginColumn,
          lastHeightMode,
          lastComputedHeight) ||
      newMeasureSizeIsStricterAndStillValid(
          heightMode,
          availableHeight - marginColumn,
          lastHeightMode,
          lastAvailableHeight,
          lastComputedHeight);
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615

  return widthIsCompatible && heightIsCompatible;
}

} // namespace facebook::yoga
