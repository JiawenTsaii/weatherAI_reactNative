/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by enums.py
// clang-format off
#pragma once

#include <cstdint>
#include <yoga/YGEnums.h>
#include <yoga/enums/YogaEnums.h>

namespace facebook::yoga {

enum class Justify : uint8_t {
  FlexStart = YGJustifyFlexStart,
  Center = YGJustifyCenter,
  FlexEnd = YGJustifyFlexEnd,
  SpaceBetween = YGJustifySpaceBetween,
  SpaceAround = YGJustifySpaceAround,
  SpaceEvenly = YGJustifySpaceEvenly,
};

template <>
<<<<<<< HEAD
constexpr int32_t ordinalCount<Justify>() {
  return 6;
}

constexpr Justify scopedEnum(YGJustify unscoped) {
  return static_cast<Justify>(unscoped);
}

constexpr YGJustify unscopedEnum(Justify scoped) {
=======
constexpr inline int32_t ordinalCount<Justify>() {
  return 6;
} 

template <>
constexpr inline int32_t bitCount<Justify>() {
  return 3;
} 

constexpr inline Justify scopedEnum(YGJustify unscoped) {
  return static_cast<Justify>(unscoped);
}

constexpr inline YGJustify unscopedEnum(Justify scoped) {
>>>>>>> d8fbf97a591e21830818fb4b5745c614f0d90615
  return static_cast<YGJustify>(scoped);
}

inline const char* toString(Justify e) {
  return YGJustifyToString(unscopedEnum(e));
}

} // namespace facebook::yoga
